// <auto-generated />
using System;
using Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(SATContext))]
    partial class SATContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AttachmentSolutionHistory", b =>
                {
                    b.Property<int>("AttachmentsAttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("SolutionHistoriesSolutionHistoryId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentsAttachmentId", "SolutionHistoriesSolutionHistoryId");

                    b.HasIndex("SolutionHistoriesSolutionHistoryId");

                    b.ToTable("SolutionHistoryAttachments");
                });

            modelBuilder.Entity("Core.Entity.Annotation", b =>
                {
                    b.Property<int>("AnnotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AnnotationBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AnnotationId");

                    b.HasIndex("UserId");

                    b.ToTable("Annotation");
                });

            modelBuilder.Entity("Core.Entity.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("Char(5)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VarChar(1000)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Core.Entity.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CelPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Core.Entity.Solution", b =>
                {
                    b.Property<int>("SolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SolutionName")
                        .HasMaxLength(50)
                        .HasColumnType("Varchar(50)");

                    b.HasKey("SolutionId");

                    b.ToTable("Solution");
                });

            modelBuilder.Entity("Core.Entity.SolutionHistory", b =>
                {
                    b.Property<int>("SolutionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SolutionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SolutionHistoryId");

                    b.HasIndex("SolutionId");

                    b.HasIndex("UserId");

                    b.ToTable("SolutionHistory");
                });

            modelBuilder.Entity("Core.Entity.Source", b =>
                {
                    b.Property<int>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("VarChar(45)");

                    b.HasKey("SourceId");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("Core.Entity.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AssignedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("AssingedToUserId")
                        .HasColumnType("int");

                    b.Property<int?>("AttendedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncidenceType")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskId");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("AssingedToUserId");

                    b.HasIndex("AttendedByUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SourceId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("Core.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VarChar(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VarChar(250)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VarChar(15)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Core.Entity.TechnicalSupport", b =>
                {
                    b.HasBaseType("Core.Entity.Task");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalSupportId")
                        .HasColumnType("int");

                    b.HasIndex("SolutionId");

                    b.ToTable("TechnicalSupport");
                });

            modelBuilder.Entity("AttachmentSolutionHistory", b =>
                {
                    b.HasOne("Core.Entity.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.SolutionHistory", null)
                        .WithMany()
                        .HasForeignKey("SolutionHistoriesSolutionHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.Annotation", b =>
                {
                    b.HasOne("Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.Attachment", b =>
                {
                    b.HasOne("Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.SolutionHistory", b =>
                {
                    b.HasOne("Core.Entity.Solution", "Solution")
                        .WithMany("SolutionHistories")
                        .HasForeignKey("SolutionId");

                    b.HasOne("Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Solution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entity.Task", b =>
                {
                    b.HasOne("Core.Entity.User", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId");

                    b.HasOne("Core.Entity.User", "AssingedTo")
                        .WithMany()
                        .HasForeignKey("AssingedToUserId");

                    b.HasOne("Core.Entity.User", "AttendedBy")
                        .WithMany()
                        .HasForeignKey("AttendedByUserId");

                    b.HasOne("Core.Entity.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Core.Entity.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("AssignedBy");

                    b.Navigation("AssingedTo");

                    b.Navigation("AttendedBy");

                    b.Navigation("Employee");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Core.Entity.TechnicalSupport", b =>
                {
                    b.HasOne("Core.Entity.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId");

                    b.HasOne("Core.Entity.Task", null)
                        .WithOne()
                        .HasForeignKey("Core.Entity.TechnicalSupport", "TaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("Core.Entity.Solution", b =>
                {
                    b.Navigation("SolutionHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
